// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package openapi

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/labstack/echo/v4"
)

// User defines model for User.
type User struct {
	// CreateDate The date that the user was created.
	CreateDate  *openapi_types.Date `json:"createDate,omitempty"`
	DateOfBirth *openapi_types.Date `json:"dateOfBirth,omitempty"`
	Email       openapi_types.Email `json:"email"`

	// EmailVerified Set to true if the user's email has been verified.
	EmailVerified bool   `json:"emailVerified"`
	FirstName     string `json:"firstName"`

	// Id Unique identifier for the given user.
	Id       int    `json:"id"`
	LastName string `json:"lastName"`
}

// PostUserJSONBody defines parameters for PostUser.
type PostUserJSONBody struct {
	DateOfBirth openapi_types.Date `json:"dateOfBirth"`
	Email       string             `json:"email"`
	FirstName   string             `json:"firstName"`
	LastName    string             `json:"lastName"`
}

// PatchUsersUserIdJSONBody defines parameters for PatchUsersUserId.
type PatchUsersUserIdJSONBody struct {
	DateOfBirth *string `json:"dateOfBirth,omitempty"`

	// Email If a new email is given, the user's email verified property will be set to false.
	Email     *string `json:"email,omitempty"`
	FirstName *string `json:"firstName,omitempty"`
	LastName  *string `json:"lastName,omitempty"`
}

// PostUserJSONRequestBody defines body for PostUser for application/json ContentType.
type PostUserJSONRequestBody PostUserJSONBody

// PatchUsersUserIdJSONRequestBody defines body for PatchUsersUserId for application/json ContentType.
type PatchUsersUserIdJSONRequestBody PatchUsersUserIdJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create New User
	// (POST /user)
	PostUser(ctx echo.Context) error
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(ctx echo.Context, userId int) error
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(ctx echo.Context, userId int) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostUser converts echo context to params.
func (w *ServerInterfaceWrapper) PostUser(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostUser(ctx)
	return err
}

// GetUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) GetUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetUsersUserId(ctx, userId)
	return err
}

// PatchUsersUserId converts echo context to params.
func (w *ServerInterfaceWrapper) PatchUsersUserId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId int

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchUsersUserId(ctx, userId)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/user", wrapper.PostUser)
	router.GET(baseURL+"/users/:userId", wrapper.GetUsersUserId)
	router.PATCH(baseURL+"/users/:userId", wrapper.PatchUsersUserId)

}

type PostUserRequestObject struct {
	Body *PostUserJSONRequestBody
}

type PostUserResponseObject interface {
	VisitPostUserResponse(w http.ResponseWriter) error
}

type PostUser200JSONResponse User

func (response PostUser200JSONResponse) VisitPostUserResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PostUser400Response struct {
}

func (response PostUser400Response) VisitPostUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(400)
	return nil
}

type PostUser409Response struct {
}

func (response PostUser409Response) VisitPostUserResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

type GetUsersUserIdRequestObject struct {
	UserId int `json:"userId"`
}

type GetUsersUserIdResponseObject interface {
	VisitGetUsersUserIdResponse(w http.ResponseWriter) error
}

type GetUsersUserId200JSONResponse User

func (response GetUsersUserId200JSONResponse) VisitGetUsersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetUsersUserId404Response struct {
}

func (response GetUsersUserId404Response) VisitGetUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchUsersUserIdRequestObject struct {
	UserId int `json:"userId"`
	Body   *PatchUsersUserIdJSONRequestBody
}

type PatchUsersUserIdResponseObject interface {
	VisitPatchUsersUserIdResponse(w http.ResponseWriter) error
}

type PatchUsersUserId200JSONResponse User

func (response PatchUsersUserId200JSONResponse) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type PatchUsersUserId404Response struct {
}

func (response PatchUsersUserId404Response) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(404)
	return nil
}

type PatchUsersUserId409Response struct {
}

func (response PatchUsersUserId409Response) VisitPatchUsersUserIdResponse(w http.ResponseWriter) error {
	w.WriteHeader(409)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create New User
	// (POST /user)
	PostUser(ctx context.Context, request PostUserRequestObject) (PostUserResponseObject, error)
	// Get User Info by User ID
	// (GET /users/{userId})
	GetUsersUserId(ctx context.Context, request GetUsersUserIdRequestObject) (GetUsersUserIdResponseObject, error)
	// Update User Information
	// (PATCH /users/{userId})
	PatchUsersUserId(ctx context.Context, request PatchUsersUserIdRequestObject) (PatchUsersUserIdResponseObject, error)
}

type StrictHandlerFunc func(ctx echo.Context, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// PostUser operation middleware
func (sh *strictHandler) PostUser(ctx echo.Context) error {
	var request PostUserRequestObject

	var body PostUserJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PostUser(ctx.Request().Context(), request.(PostUserRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostUser")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PostUserResponseObject); ok {
		return validResponse.VisitPostUserResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// GetUsersUserId operation middleware
func (sh *strictHandler) GetUsersUserId(ctx echo.Context, userId int) error {
	var request GetUsersUserIdRequestObject

	request.UserId = userId

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetUsersUserId(ctx.Request().Context(), request.(GetUsersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetUsersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetUsersUserIdResponseObject); ok {
		return validResponse.VisitGetUsersUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}

// PatchUsersUserId operation middleware
func (sh *strictHandler) PatchUsersUserId(ctx echo.Context, userId int) error {
	var request PatchUsersUserIdRequestObject

	request.UserId = userId

	var body PatchUsersUserIdJSONRequestBody
	if err := ctx.Bind(&body); err != nil {
		return err
	}
	request.Body = &body

	handler := func(ctx echo.Context, request interface{}) (interface{}, error) {
		return sh.ssi.PatchUsersUserId(ctx.Request().Context(), request.(PatchUsersUserIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchUsersUserId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(PatchUsersUserIdResponseObject); ok {
		return validResponse.VisitPatchUsersUserIdResponse(ctx.Response())
	} else if response != nil {
		return fmt.Errorf("Unexpected response type: %T", response)
	}
	return nil
}
